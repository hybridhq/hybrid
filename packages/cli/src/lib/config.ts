import fs from "fs"

export const readConfig = () => {
  const config = JSON.parse(
    fs.readFileSync(process.cwd() + "/contracts/" + "compiled.json").toString()
  )
  return config
}

export const writeConfig = async () => {
  const contracts = await listContracts(process.cwd() + "/contracts")

  const json = contracts.reduce((acc, c) => {
    acc[c.name] = {
      abi: c.abi,
      bytecode: c.bytecode
    }
    return acc
  }, {})

  await fs.writeFileSync(
    process.cwd() + "/contracts/" + "compiled.json",
    JSON.stringify(json, null, 2)
  )

  return fs.writeFileSync(
    process.cwd() + "/contracts/" + "index.ts",
    `
// This file is auto-generated by Hybrid

export const Deployments = {
  ${contracts
    .map((c) => {
      return `${c.name}: {
    abi: ${JSON.stringify(c.abi)} as const,
    bytecode: ${JSON.stringify(c.bytecode)}
  }`
    })
    .join(",\n  ")}
};`
  )
}

const listContracts = async (dir) => {
  const files = await fs.readdirSync(dir)
  const filtered = files.filter(
    (f) => f.endsWith(".sol") && !f.match(/(t|test)\.sol$/)
  )
  return Promise.all(
    filtered.map((f) => {
      const name = f.replace(".sol", "")
      // const file = `./out/${name}.sol/${name}.json`
      const json = JSON.parse(
        fs
          .readFileSync(process.cwd() + `/.hybrid/out/${name}.sol/${name}.json`)
          .toString()
      )

      // if (!fs.existsSync(process.cwd() + "/.hybrid" + file))
      //   throw new Error(`Contract contracts/${name}.sol#${name} not found.`)

      return {
        name,
        abi: json.abi,
        bytecode: json.bytecode.object
      }
    })
  )
}
